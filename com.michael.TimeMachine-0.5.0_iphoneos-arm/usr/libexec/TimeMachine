#!/bin/bash

if [[ ! `id -u` == '0' ]];then
	echo 'Run this as root!'
	exit 1
fi

if [ -f "/usr/bin/snappy" ];then
	tool=snappy
elif [ -f "/usr/bin/snapUtil" ];then
	tool=snapUtil
else
	echo "Unable to get the tool that depend on."
	exit 1
fi

bash /etc/rc.d/snapshotcheck

if [[ "${tool}" == 'snappy' ]];then
	snappy -f / -c "com.apple.TimeMachine.`date +%F-%T`"
	snappy -f /private/var -c "com.apple.TimeMachine.`date +%F-%T`"
elif [[ "${tool}" == 'snapUtil' ]];then
	snapUtil -c "com.apple.TimeMachine.`date +%F-%T`" /
	snapUtil -c "com.apple.TimeMachine.`date +%F-%T`" /private/var
fi

if [[ "${tool}" == 'snappy' ]];then
	for rootfs_snapshot in `snappy -f / -l`
	do
		if [[ "$rootfs_snapshot" == com.apple.TimeMachine* && ! "$rootfs_snapshot" == 'com.apple.TimeMachine.orig-fs' && ! "$rootfs_snapshot" == 'com.apple.TimeMachine.electra-prejailbreak' ]];then
			rootfs_snapshots=(${rootfs_snapshots[@]} ${rootfs_snapshot})
		fi
	done
	for datafs_snapshot in `snappy -f /private/var -l`
	do
		if [[ "$datafs_snapshot" == com.apple.TimeMachine* ]];then
			datafs_snapshots=(${datafs_snapshots[@]} ${datafs_snapshot})
		fi
	done
elif [[ "${tool}" == 'snapUtil' ]];then
	for rootfs_snapshot in `snapUtil -l /`
	do
		if [[ "$rootfs_snapshot" == com.apple.TimeMachine* && ! "$rootfs_snapshot" == 'com.apple.TimeMachine.orig-fs' && ! "$rootfs_snapshot" == 'com.apple.TimeMachine.electra-prejailbreak' ]];then
			rootfs_snapshots=(${rootfs_snapshots[@]} ${rootfs_snapshot})
		fi
	done
	for datafs_snapshot in `snapUtil -l /private/var`
	do
		if [[ "$datafs_snapshot" == com.apple.TimeMachine* ]];then
			datafs_snapshots=(${datafs_snapshots[@]} ${datafs_snapshot})
		fi
	done
fi

if [ ! -f "/var/mobile/Library/Preferences/com.michael.TimeMachine.plist" ];then
	max_rootfs_snapshot=7
	max_datafs_snapshot=7
else
	max_rootfs_snapshot=`plutil -key max_rootfs_snapshot /var/mobile/Library/Preferences/com.michael.TimeMachine.plist`
	max_datafs_snapshot=`plutil -key max_datafs_snapshot /var/mobile/Library/Preferences/com.michael.TimeMachine.plist`
fi

if [ "${#rootfs_snapshots[@]}" -gt "${max_rootfs_snapshot}" ];then
	for i in $(seq `expr ${max_rootfs_snapshot} + 1` ${#rootfs_snapshots[@]})
	do
		if [[ "${tool}" == 'snappy' ]];then
			snappy -f / -d ${rootfs_snapshots[0]}
			check_snapshot=`snappy -f / -l | grep "^${rootfs_snapshots[0]}$"`
			if [[ "${check_snapshot}" == "${rootfs_snapshots[0]}" ]];then
				echo "Error: rootfs snapshot ${rootfs_snapshots[0]} delete failed."
				exit 1
			fi
			echo "Successful deleted rootfs snapshot ${rootfs_snapshots[0]}."
			unset rootfs_snapshots[0]
			rootfs_snapshots=("${rootfs_snapshots[@]}")
		elif [[ ${tool} == 'snapUtil' ]];then
			snapUtil -d ${rootfs_snapshots[0]} /
			check_snapshot=`snapUtil -l / | grep "^${rootfs_snapshots[0]}$"`
			if [[ "${check_snapshot}" == "${rootfs_snapshots[0]}" ]];then
				echo "Error: rootfs snapshot ${rootfs_snapshots[0]} delete failed."
				exit 1
			fi
			echo "Successful deleted rootfs snapshot ${rootfs_snapshots[0]}."
			unset rootfs_snapshots[0]
			rootfs_snapshots=("${rootfs_snapshots[@]}")
		fi
	done
fi

if [ "${#datafs_snapshots[@]}" -gt "${max_datafs_snapshot}" ];then
	for i in $(seq `expr ${max_datafs_snapshot} + 1` ${#datafs_snapshots[@]})
	do
		if [[ "${tool}" == 'snappy' ]];then
			snappy -f /private/var -d ${datafs_snapshots[0]}
			check_snapshot=`snappy -f /private/var -l | grep "^${datafs_snapshots[0]}$"`
			if [[ "${check_snapshot}" == "${datafs_snapshots[0]}" ]];then
				echo "Error: datafs snapshot ${datafs_snapshots[0]} delete failed."
				exit 1
			fi
			echo "Successful deleted datafs snapshot ${datafs_snapshots[0]}."
			unset datafs_snapshots[0]
			datafs_snapshots=("${datafs_snapshots[@]}")
		elif [[ "${tool}" == 'snapUtil' ]];then
			snapUtil -d ${datafs_snapshots[0]} /private/var
			check_snapshot=`snapUtil -l /private/var | grep "^${datafs_snapshots[0]}$"`
			if [[ "${check_snapshot}" == "${datafs_snapshots[0]}" ]];then
				echo "Error: datafs snapshot ${datafs_snapshots[0]} delete failed."
				exit 1
			fi
			echo "Successful deleted datafs snapshot ${datafs_snapshots[0]}."
			unset datafs_snapshots[0]
			datafs_snapshots=("${datafs_snapshots[@]}")
		fi
	done
fi

echo "TimeMachine on iOS's work is down, enjoy safety."
